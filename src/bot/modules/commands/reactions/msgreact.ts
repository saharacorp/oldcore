// PlutoCore - src/bot/modules/commands/msgreact.ts
// Written by Sam - https://quinnlane.dev/

import { Command } from 'discord-akairo'
import { Message } from 'discord.js'
import { genEmbed } from '../../utilities/EmbedGenerator'
import { readFileSync } from 'fs'
import config from '../../../../configuration/config'

const subcommands = [
  'help',
  'status',
  'toggle',
  'setemote',
  'settarget'
]

function resolveDescription (subcommand) {
  if (!subcommands.includes(subcommand)) throw new Error('Subcommand does not exist!')

  switch (subcommand) {
    case 'help':
      return 'Displays the help page for this command'

    case 'status':
      return 'Displays status of message reactions'

    case 'toggle':
      return 'Toggles message reactions'

    case 'setemote':
      return 'Sets the emote to react with (Requires additonal value)'

    case 'settarget':
      return 'Sets the target to listen for (Requires additional value)'
  }
}

export default class MessageReactCommand extends Command {
  constructor () {
    super('msgreact', {
      aliases: [
      	'msgreact',
        'react'
      ],
      ownerOnly: true,
      category: 'Reactions',
      description: {
        content: 'Manage automatic message reactions',
        usage: 'msgreact <subcommand> [args]',
        examples: [
          'msgreact status',
          'msgreact setemote :crab:',
          'msgreact settarget <@753729496724799588>'
        ]
      },
      args: [
        {
          id: 'subcommand',
          type: 'string',
          default: 'help'
        },
        {
          id: 'value',
          type: 'string',
          default: null
        }
      ]
    })
  }

  async sendHelp (message: Message) {
    const eHelp = genEmbed({
      title: ':question: Message Reactions - Help',
      color: '#0c0910',
      author: {
        name: config.bot.personalization.embed.name,
        link: config.bot.personalization.embed.link,
        image: config.bot.personalization.embed.image
      },
      footer: {
        text: `Generated by ${message.author.tag}`,
        image: message.author.displayAvatarURL({ dynamic: true })
      },
      fields: [
        {
          name: 'Syntax',
          value: '`.msgreact <subcommand> [value]`'
        },
        {
          name: 'Subcommands',
          value: subcommands.map(subcommand => ` - ${config.bot.prefix}msgreact ${subcommand} | ${resolveDescription(subcommand)}`)
        }
      ],
      timestamp: true
    })

    return await message.channel.send(eHelp)
  }

  async exec (message: Message, args) {
    switch (args.subcommand) {
      case 'help':
      	return await this.sendHelp(message)

      case 'status':
        const eStatus = genEmbed({
          title: ':flags: Message Reactions - Status',
          description: `**Enabled:** ${config.bot.commands.msgreact.enabled.toString()}\n**Emote:** ${config.bot.commands.msgreact.emote}\n**Target:** <@${config.bot.commands.msgreact.target}>`,
          color: '#453750',
          author: {
          	name: config.bot.personalization.embed.name,
            link: config.bot.personalization.embed.link,
            image: config.bot.personalization.embed.image
          },
          footer: {
          	text: `Generated by ${message.author.tag}`,
            image: message.author.displayAvatarURL({ dynamic: true })
          },
          timestamp: true
        })

        return await message.channel.send(eStatus)

      case 'toggle':
        config.bot.commands.msgreact.enabled = !config.bot.commands.msgreact.enabled
        return await message.channel.send(genEmbed({
          title: 'üö¶ Message Reactions - Toggled',
          description: config.bot.commands.msgreact.enabled ? 'Message reactions have been enabled' : 'Message reactions have been disabled',
          color: '#73648a',
          author: {
            name: config.bot.personalization.embed.name,
            link: config.bot.personalization.embed.link,
            image: config.bot.personalization.embed.image
          },
          footer: {
            text: `Generated by ${message.author.tag}`,
            image: message.author.displayAvatarURL({ dynamic: true })
          },
          timestamp: true
        }))

      case 'setemote':
      	if (args.value === null) {
      		const emoteError = genEmbed({
            title: ':x: Error!',
            description: 'No emote was specified',
            color: config.bot.personalization.embed.defaultColors.error,
            author: {
              name: config.bot.personalization.embed.name,
              link: config.bot.personalization.embed.link,
              image: config.bot.personalization.embed.image
            },
            footer: {
              text: `Generated by ${message.author.tag}`,
              image: message.author.displayAvatarURL({ dynamic: true })
            },
            timestamp: true
          })
          return await message.channel.send(emoteError)
        }
        config.bot.commands.msgreact.emote = args.value
        return await message.channel.send(genEmbed({
          title: 'üëã Message Reactions - Emote set',
          description: `Reaction emote set to ${args.value} (\\${args.value})`,
          color: '#9882AC',
          author: {
            name: config.bot.personalization.embed.name,
            link: config.bot.personalization.embed.link,
            image: config.bot.personalization.embed.image
          },
          footer: {
            text: `Generated by ${message.author.tag}`,
            image: message.author.displayAvatarURL({ dynamic: true })
          },
          timestamp: true
        }))

      case 'settarget':
        const user = message.mentions.users.first()
        if (user === undefined) {
        	const eSetTargetError = genEmbed({
            title: ':x: Error!',
            description: 'You must specify a target!',
            color: config.bot.personalization.embed.defaultColors.error,
            author: {
              name: config.bot.personalization.embed.name,
              link: config.bot.personalization.embed.link,
              image: config.bot.personalization.embed.image
            },
            footer: {
              text: `Generated by ${message.author.tag}`,
              image: message.author.displayAvatarURL({ dynamic: true })
            },
            timestamp: true
          })
          if (config.bot.personalization.detailedErrorMessages) {
            eSetTargetError.addFields([
              {
                name: 'Syntax',
                value: '`.msgreact <subcommand> [value]`'
              },
              {
                name: 'Documentation',
                value: `\`\`\`${readFileSync('./messages/documentation/msgReactCommand.txt', { encoding: 'utf-8' })}\`\`\``
              }
            ])
          }
          return await message.channel.send(eSetTargetError)
        }
        config.bot.commands.msgreact.target = user.id
        return await message.channel.send(genEmbed({
          title: 'üßç Message Reactions - Target set',
          description: `Reaction target set to ${args.value} (${user.id})`,
          color: '#a393bf',
          author: {
            name: config.bot.personalization.embed.name,
            link: config.bot.personalization.embed.link,
            image: config.bot.personalization.embed.image
          },
          footer: {
            text: `Generated by ${message.author.tag}`,
            image: message.author.displayAvatarURL({ dynamic: true })
          },
          timestamp: true
        }))

      default:
        return await this.sendHelp(message)
    }
  }
}
